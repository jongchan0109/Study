[8-1] 예외처리의 정의와 목적에 대해서 설명하시오.

[8-1 풀이]
정의 - 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것


[8-2] 다음은 실행도중 예외가 발생하여 화면에 출력된 내용이다. 이에 대한 설명 중 옳지 않은 것은?
java.lang.ArithmeticException : / by zero
  at ExceptionEx18.method2(ExceptionEx18.java:12)
  at ExceptionEx18.method1(ExceptionEx18.java:8)
  at ExceptionEx18.main(ExceptionEx18.java:4)

a. 위의 내용으로 예외가 발생했을 당시 호출스택에 존재했던 메서드를 알 수 있다.
b. 예외가 발생한 위치는 method2 메서드이며, ExceptionEx18.java 파일의 12 번째 줄이다.  
c. 발생한 예외는 ArithmeticException이며 , 0으로 나누어서 예외가 발생했다.
d. method2 메소드가 method1 메소드를 호출하였고, 그 위치는 ExceptionEx18.java 파일의 8번째 줄이다.

[8-2 풀이]
d. method2 메소드가 method1 메소드를 호출한 것이 아닌, method1 메소드가 method2 메소드를 호출한 것이다.


[8-3] 다음 중 오버라이딩이 잘못된 것은? (모두 고르시오)
void add(int a, int b)
  throws InvalidNumberException, NotANumberException {}

class NumberException extends Exception {}
class InvalidNumberException extends NumberException {}
class NotANumberException extends NumberException {}

a. void add(int a, int b) throws InvalidNumberException, NotANumberException {}
b. void add(int a, int b) throws InvalidNumberException {}
c. void add(int a, int b) throws NotANumberException {}
d. void add(int a, int b) throws Exception {}
e. void add(int a, int b) throws NumberException {}

[8-3 풀이]
d,e 오버라이등을 할 때, 조상 클래스의 메소드보다 많은 수의 예외를 선언할 수 없다.


[8-4] 다음과 같은 메소드가 있을 때, 예외를 잘못 처리한 것은? (모두 고르시오)
void method() throws InvalidNumberException, NotANumberException {}
class NumberException extends RuntimeException {}
class InvalidNumberException extends NumberException {}
class NotANumberException extends NumberException {}

a. try {method();} catch(Exception e) {}
b. try {method();} catch(NumberException e) {} catch(Exception e) {}
c. try {method();} catch(Exception e) {} catch(NumberException e) {}
d. try {method();} catch(InvalidNumberException e) {
                  } catch(NotANumberException e) {}
e. try {method();} catch(NumberException e) {}
f. try {method();} catch(RuntimeException e) {}

[8-4 풀이]
c. 모든 예외의 최고조상인 Exception이 선언된 catch블럭은 모든 예외를 다 처리할 수 있기 때문에 모든 catch블럭 중 제일 마지막에 있어야 한다.

[8-5] 아래의 코드가 수행되었을 때의 실행결과를 적으시오.
