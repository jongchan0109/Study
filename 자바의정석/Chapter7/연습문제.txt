[7-1] 섯다카드 20장을 포함하는 섯다카드 한 벌(SutdDeck 클래스)을 정의한 것이다. 섯다카드 20장을 담는 SutdaCard배열을 초기화하시오. 
단, 섯다카드는 1부터 10까지의 숫자가 적힌 카드가 한 쌍씩 있고, 숫자가 1, 3, 8인 경우에는 둘 중의 한 장의 광(Kwang)이 있어야 한다.
즉 SutdaCard의 인스턴스 변수 isKwang의 값이 true이어야 한다.

class SutdaDeck {
    final int CARD_NUM = 20;
    SutdaCard[] cards = new SutdaCard[CARD_NUM];
    SutdaDeck() {
        /*
        (1) SutdaCard . 배열 를 적절히 초기화 하시오
        */
    }
}
class SutdaCard {
    int num;
    boolean isKwang;
    SutdaCard() {
        this(1, true);
    }
    SutdaCard(int num, boolean isKwang) {
        this.num = num;
        this.isKwang = isKwang;
    }
    // info()대신 Object 클래스이  toString()을 오버라이딩했다.
    public String toString() {
        return num + ( isKwang ? "K":"");
    }
}
class Exercise7_1 {
    public static void main(String args[]) {
        SutdaDeck deck = new SutdaDeck();
        for(int i=0; i < deck.cards.length;i++)
            System.out.print(deck.cards[i]+",");
    }
}

실행 결과
1K,2,3K,4,5,6,7,8K,9,10,1,2,3,4,5,6,7,8,9,10,

[7-1 풀이]
코드 참조


[7-2] 문제 7-1의 SutdaDeck클래스에 다음에 정의된 새로운 메소드를 추가하고 테스트 하시오.
1. 메소드명 : shuffle
   기   능 : 배열 cards에 담긴 카드의 위치를 뒤섞는다.(Math.random() 사옹)
   반환타입 : 없음
   매개변수 : 없음

2. 메소드명 : pick
   기   능 : 배열 cards에서 지정된 위치의 SutdaCard를 반환한다.
   반환타입 : SutdaCard
   매개변수 : int index - 위치

3. 메소드명 : pick
   기   능 : 배열 cards에서 임의의 위치의 SutdaCard를 반환한다.
   반환타입 : SutdaCard
   매개변수 : 없음

[7-2 풀이]
코드 참조


[7-3] 오버라이딩의 정의와 필요성에 대해서 설명하시오.

[7-3 풀이]
오버라이딩이란 조상 클래스로부터 상속받은 메소드를 자손 클래스에 맞게 재정의 하는 것이다.
조상 클래스로부터 상속받은 메소드를 자손 클래스에서 그대로 사용할 수 없는 경우가 많기 때문에 오버라이딩이 필요하다.


[7-4] 다음 중 오버라이딩의 조건으로 옳지 않은 것은?(모두 고르시오)
a. 조상의 메서드와 이름이 같아야 한다.
b. 매개변수의 수와 타입이 모두 같아야 한다.
c. 접근 제어자는 조상의 메서드보다 좁은 범위로만 변경할 수 있다.
d. 조상의 메서드보다 더 많은 수의 예외를 선언할 수 있다.

[7-4 풀이]
c. 접근 제어자는 조상의 메소드보다 넓거나 같은 범위로만 변경할 수 있다.
d. 조상의 메소드보다 더 많은 수의 예외를 선언할 수 없다.


[7-5] 다음의 코드는 컴파일하면 에러가 발생한다. 그 이유를 설명하고 에러를 수정하기 위해서는 코드를 어떻게 바꾸어야 하는가?
class Product
{
    int price; // 제품의 가격
    int bonusPoint; // 제품구매 시 제공하는 보너스점수
    Product(int price) {
        this.price = price;
        bonusPoint =(int)(price/10.0);
    }
}
class Tv extends Product {
    Tv() {}
    public String toString() {
        return "Tv";
    }
}
class Exercise7_5 {
    public static void main(String[] args) {
        Tv t = new Tv();
    }
}

[7-5 풀이]
자손 클래스의 생성자 Tv() 에서 부모클래스의 생성자를 지정하지 않아서 자동적으로 super()이 삽입이 되는데, 부모클래스에서는 매개변수가 없는 생성자가 없어서 컴파일 에러가 발생한다.
에러를 수정하기 위해서는 부모클래스에 기본 생성자를 만들거나 자손 클래스의 생성자에서 super(int price)를 첫 줄에 삽입해야 한다.


[7-6] 자손 클래스의 생성자에서 조상 클래스의 생성자를 호출해야 하는 이유는 무엇인가?

[7-6 풀이]
자손 클래스에서는 조상 클래스의 멤버변수를 사용할 수 있는데, 조상 클래스의 멤버변수가 초기화 되지 않고 사용되면 에러가 발생할 수 있기 때문이다.


[7-7] 다음 코드의 실행했을 때 호출되는 생성자의 순서와 실행결과를 적으시오.
class Parent {
    int x=100;
    Parent() {
        this(200);
    }
    Parent(int x) {
        this.x = x;
    }
    int getX() {
        return x;
    }
}
class Child extends Parent {
    int x = 3000;
    Child() {
        this(1000);
    }
    Child(int x) {
        this.x = x;
    }
}
class Exercise7_7 {
    public static void main(String[] args) {
        Child c = new Child();
        System.out.println("x="+c.getX());
    }
}

[7-7 풀이]
Child() -> Child(int x) -> Parent() -> Parent(int x) -> Object()


[7-8] 다음 중 접근제어자를 접근범위가 넓은 것에서 좁은 것의 순으로 바르게 나열한 것은?
a. public-protected-(default)-private
b. public-(default)-protected-private
c. (default)-public-protected-private
d. private-protected-(default)-public

[7-8 풀이]
a public -> protected -> (default) -> private


[7-9] 다음 중 제어자 final을 붙일 수 있는 대상과 붙였을 때 그 의미를 적은 것이다. 옳지 않은 것은? (모두 고르시오)
a. 지역변수 - 값을 변경할 수 없다.
b. 클래스 - 상속을 통해 클래스에 새로운 멤버를 추가할 수 없다.
c. 메서드 - 오버로딩을 할 수 없다.
d. 멤버변수 - 값을 변경할 수 없다.

[7-9 풀이]
c. 메소드 - 오버라이딩을 할 수 없다.


[7-10] MyTv2클래스의 멤버변수 isPowerOn, channel, volume을 클래스 외부에서 접근할 수 없도록 제어자를 붙이고, 대신
이 멤버변수들의 값을 어디서나 읽고 변경할 수 있도록 getter와 setter 메소드를 추가하라.

[7-10 풀이]
코드 참조


[7-11] 문제 7-10에서 작성한 MyTv2클래스에 이전 채널(previous channel)로 이동하는 기능의 메소드를 추가해서 실행결과와 같은 결과를 얻도록 하시오.
메서드명 : gotoPrevChannel
기   능 : 현재 채널을 이전 채널로 변경한다.
반환타입 : 없음
매개변수 : 없음 

[7-11 풀이]
코드 참조


[7-12] 다음 중 접근 제어자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. public은 접근제한이 전혀 없는 접근 제어자이다.
b. (default)가 붙으면, 같은 패키지 내에서만 접근이 가능하다.
c. 지역변수에도 접근 제어자를 사용할 수 있다.
d. protected가 붙으면, 같은 패키지 내에서도 접근이 가능하다.
e. protected가 붙으면, 다른 패키지의 자손 클래스에서 접근이 가능하다.

[7-12 풀이]
c. 지역변수에는 접근 제어자를 사용할 수 없다.


[7-13] Math클래스의 생성자는 접근 제어자가 private이다. 그 이유는 무엇인가?

[7-13 풀이]
Math클래스는 모든 메소드가 static 메소드이고, 인스턴스 변수가 존재하지 않기 때문에 객체를 생성할 필요가 없기 때문에


[7-14] 문제 7-1에서 나오는 섯다카드의 숫자와 종류(isKwang)는 사실 한번 값이 지정되면 변경되어서는 안되는 값이다. 카드의 숫자가 한번 잘못 바뀌면 똑같은
카드가 두 장이 될 수도 있기 때문이다. 이러한 문제점이 발생하지 않도록 아래의 SutdaCard를 수정하시오.

[7-14 풀이]
int num, boolean isKwang를 final을 붙여서 상수로 수정하면 된다.


[7-15] 클래스가 다음과 같이 정의되어 있을 때, 형변환을 올바르게 하지 않은 것은? (모두 고르시오)
class Unit {}
class AirUnit extends Unit {}
class GroundUnit extends Unit {}
class Tank extends GroundUnit {}
class AirCraft extends AirUnit {}
Unit u = new GroundUnit();
Tank t = new Tank();
AirCraft ac = new AirCraft();

a. u = (Unit)ac;
b. u = ac;
c. GroundUnit gu = (GroundUnit)u;
d. AirUnit au = ac;
e. t = (Tank)u;
f. GroundUnit gu = t;

[7-15 풀이]
e. t = (Tank)u -> 조상 타입의 인스턴스를 자손 타입으로 형변환 할 수 없다.


[7-16] 다음 중 연산결과가 true가 아닌 것은? (모두 고르시오)
class Car {}
class FireEngine extends Car implements Movable {}
class Ambulance extends Car {}
FireEngine fe = new FireEngine();

a. fe instanceof FireEngine
b. fe instanceof Movable
c. fe instanceof Object
d. fe instanceof Car
e. fe instanceof Ambulance

[7-16 풀이]
e. fe는 FireEngine 인스턴스를 가리키므로 Ambulance와는 관련 없다.


[7-17] 아래 세 개의 클래스로부터 공통부분을 뽑아서 unit이라는 클래스를 만들고, 이 클래스를 상속받도록 코드르 변경하시오.

[7-17 풀이]
코드 참조


[7-18] 다음과 같은 실행결과를 얻도록 코드를 완성하시오.
메서드명 : action
기   능 : 주어진 객체의 메서드를 호출한다.
        DanceRobot인 경우, dance()를 호출하고
        SingRobot인 경우, sing()을 호출하고
        DrawRobot인 경우, draw()를 호출한다,
반환타입 : 없음
매개변수 : Robot r -Robot 인스턴스 또는 Robot의 자손 인스턴스

[7-18 풀이]
코드 참조


[7-19] 다음은 물건을 구입하는 사람을 정의한 Buyer클래스이다. 이 클래스는 멤버변수로 돈(money)과 장바구니(cart)를 가지고 있다. 제품을 구입하는 기능의 buy 메소드와
장바구니에 구입한 물건을 추가하는 add메소드, 구입한 물건의 목록과 사용금액, 그리고 남은 금액을 출력하는 summary메소드를 완성하시오.

1. 메소드명 : buy
   기   능 : 지정된 물건을 구입한다. 가진 돈(money)에서 물건의 가격을 빼고, 장바구니(cart)에 담는다.
            만일 가진 돈이 물건의 가격보다 적다면 바로 종료한다.
   반환타입 : 없음
   매개변수 : Product p - 구입할 물건

1. 메소드명 : add
   기   능 : 지정된 물건을 장바구니에 담는다.
            만일 장바구니에 담을 공간이 없으면, 장바구니의 크기를 2배로 늘린 다음에 담는다.
   반환타입 : 없음
   매개변수 : Product p - 구입할 물건

1. 메소드명 : summary
   기   능 : 구입한 물건의 목록과 사용금액, 남은 금액을 출력한다.
   반환타입 : 없음
   매개변수 : 없음

[7-19 풀이]
코드 참조


[7-20] 다음의 코드를 실행한 결과를 적으시오.
class Exercise7_20 {
    public static void main(String[] args) {
        Parent p = new Child();
        Child c = new Child();
        System.out.println("p.x = " + p.x);
        p.method();
        System.out.println("c.x = " + c.x);
        c.method();
    }
}
class Parent {
    int x = 100;
    void method() {
        System.out.println("Parent Method");
    }
}
class Child extends Parent {
    int x = 200;
    void method() {
        System.out.println("Child Method");
    }
}

[7-20 풀이]
p.x = 100
Child Method
c.x = 200
Child Method


[7-21] 다음과 같이 attack 메소드가 정의되어 있을 때, 이 메소드의 매개변수로 가능한 것 두 가지를 적으시오.
interface Movable {
void move(int x, int y);
}
void attack(Movable f) {
/* */ 내용 생략
}

[7-21 풀이]
1. null
2. Movable 를 구현한 클래스 또는 그 자손의 인스턴스


[7-22] 아래는 도형을 정의한 Shape클래스이다. 이 클래스를 조상으로 하는 Circle클래스와 Rectangle클래스를 작성하시오.
이 때, 생성자도 각 클래스에 맞게 적적히 추가해야 한다.

(1)  클래스명  : Circle
     조상클래스 : Shape
     멤버변수  : double r - 반지름

(2)  클래스명  : Rectangle
     조상클래스 : Shape
     멤버변수  : double width - 폭
               double height - 넓이
     메소드명   : isSquare
     기   능   : 정사각형인지 아닌지를 알려준다.
     반환타입   : boolean
     매개변수   : 없음

[7-22 풀이]
코드 참조


[7-23] 문제 7-22에서 정의한 클래스들의 면적을 구하는 메소드를 작성하고 테스트 하시오.

1. 메소드명 : sumArea
   기   능 : 주어진 배열에 담긴 도형들의 넓이를 모두 더해서 반환한다.
   반환타입 : double
   매개변수 : Shape[] arr

[7-23 풀이]
코드 참조


[7-24] 다음 중 인터페이스의 장점이 아닌 것은?
a. 표준화를 가능하게 해준다.
b. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
c. 독립적인 프로그래밍이 가능하다.
d. 다중상속을 가능하게 해준다.
e. 패키지간의 연결을 도와준다.

[7-24 풀이]
e. 패키지간의 연결과 인터페이스는 관련이 없다.


[7-25] Outer클래스의 내부 클래스 inner의 멤버변수 iv의 값을 출력하시오.

class Outer {
    class Inner {
        int iv=100;
    }
}
class Exercise7_25 {
    public static void main(String[] args) {
        /*
        (1) 알맞은 코드를 넣어 완성하시오.
        */
    }
}

[7-25 풀이]
코드 참조


[7-26] Outer클래스의 내부 클래스 inner의 멤버변수 iv의 값을 출력하시오.

class Outer {
    static class Inner {
        int iv=200;
    }
}
class Exercise7_26 {
    public static void main(String[] args) {
/*
(1) 알맞은 코드를 넣어 완성하시오.
*/
    }
}

[7-26 풀이]
코드 참조


[7-27] 다음과 같은 실행결과를 얻도록 (1)~(4)의 코드를 완성하시오.

class Outer {
    int value=10;
    class Inner {
        int value=20;
        void method1() {
            int value=30;
            System.out.println(/* (1) */);
            System.out.println(/* (2) */);
            System.out.println(/* (3) */);
        }
    } // Inner클래스의 끝
} // Outer클래스의 끝
class Exercise7_27 {
    public static void main(String args[]) {
/*
(4) 알맞은 코드를 넣어 완성하시오.
*/
        inner.method1();
    }
}

실행 결과
30
20
10

[7-27 풀이]
코드 참조


[7-28] 아래의 EventHandler를 익명 클래스로 변경하시오.

import java.awt.*;
import java.awt.event.*;
class Exercise7_28
{
    public static void main(String[] args)
    {
        Frame f = new Frame();
        f.addWindowListener(new EventHandler());
    }
}
class EventHandler extends WindowAdapter
{
    public void windowClosing(WindowEvent e) {
        e.getWindow().setVisible(false);
        e.getWindow().dispose();
        System.exit(0);
    }
}

[7-28 풀이]
코드 참조


[7-29] 지역 클래스에서 외부 클래스의 인스턴스 멤버와 static 멤버에 모두 접근할 수 있지만, 지역변수는 final이 붙은 상수만 접근할 수 있는 이유는 무엇인가?

[7-29 풀이]
메소드가 수행을 마쳐서 지역변수가 소멸된 시점에도, 지역 클래스의 인스턴스가 소멸된 지역변수를 참조하려는 경우가 발생할 수 있기 때문이다.
