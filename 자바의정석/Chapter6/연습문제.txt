[6-2] 문제6-1 에서 정의한 SutdaCard클래스에 두 개의 생성자와 info()를 추가해서 실행 결과와 같은 결과를 얻도록 하시오.

class Exercise6_2 {
    public static void main(String args[]) {
        SutdaCard card1 = new SutdaCard(3, false);
        SutdaCard card2 = new SutdaCard();
        System.out.println(card1.info());
        System.out.println(card2.info());
    }
}
class SutdaCard {
/* (1) . 알맞은 코드를 넣어 완성하시오*/
}

실행 결과
3
1K

[6-2 풀이]
코드 참조


[6-4] 문제 6-3에서 정의한 Student클래스에 다음과 같이 정의된 두 개의 메서드 getTotal()과 getAverage()를 추가하시오.
1. 메서드명: getTotal()
   기   능: 국어(kor), 영어(eng), 수학(math)의 점수를 모두 더해서 반환한다.
   반환타입: int
   매개변수: 없음

2. 메서드명: getAverage()
   기   능: 총점을 과목수로 나눈 평균을 구한다. 소수점 둘째자리에서 반올림할 것.
   반환타입: float
   매개변수: 없음

[6-4 풀이]
코드 참조

[6-5] 다음과 같은 실행결과를 얻도록 Student클래스에 생성자와 info()를 추가하시오.
class Exercise6_5 {
    public static void main(String args[]) {
        Student s = new Student(" ",1,1,100,60,76); 홍길동
        System.out.println(s.info());
    }
}
class Student {
/*
(1) . 알맞은 코드를 넣어 완성하시오
*/
}

실행 결과
홍길동,1,1,100,60,76,236,78.7

[6-5 풀이]
코드 참조


[6-6] 두 점의 거리를 계산하는 getDistance()를 완성하시오.
class Exercise6_6 {
    // (x,y) (x1,y1) . 두 점 와 간의 거리를 구한다
    static double getDistance(int x, int y, int x1, int y1) {
/*
(1) . 알맞은 코드를 넣어 완성하시오
*/
    }
    public static void main(String args[]) {
        System.out.println(getDistance(1,1,2,2));
    }
}

[6-6 풀이]
코드 참조


[6-7] 문제 6-6에서 작성한 클래스메서드 getDistance()를 MyPoint클래스의 인스턴스메서드로 정의하시오.
class MyPoint {
    int x;
    int y;
    MyPoint(int x, int y) {
        this.x = x;
        this.y = y;
    }
/*
(1) getDistance . 인스턴스메서드 를 작성하시오
*/
}
class Exercise6_7 {
    public static void main(String args[]) {
        MyPoint p = new MyPoint(1,1);
// p (2,2) . 와 의 거리를 구한다
        System.out.println(p.getDistance(2,2));
    }
}

[6-7 풀이]
코드 참조


[6-8] 다음의 코드에 정의된 변수들을 종류별로 구분해서 적으시오.

class PlayingCard {
    int kind;
    int num;
    static int width;
    static int height;
    PlayingCard(int k, int n) {
        kind = k;
        num = n;
    }
    public static void main(String args[]) {
        PlayingCard card = new PlayingCard(1,1);
    }
}

[6-8 풀이]
- 클래스 변수(static 변수) : width,height
- 인스턴스 변수: kind, num
- 지역 변수: k,m,card,args

[6-9] 다음은 컴퓨터 게임의 병사(marine)를 클래스로 정의한 것이다. 이 클래스의 멤버 중에 static을 붙여야 하는 것은 어떤 것들이고 그 이유는 무엇인가?
(단, 모든 병사의 공격력과 방어력은 같아야 한다.)
class Marine {
    int x=0, y=0; // Marine (x,y) 의 위치좌표
    int hp = 60; // 현재 체력
    int weapon = 6; // 공격력
    int armor = 0; // 방어력
    void weaponUp() {
        weapon++;
    }
    void armorUp() {
        armor++;
    }
    void move(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

[6-9 풀이]
모든 병사의 공격력과 방어력은 같아야 하므로 weapon과 armor에 static를 붙여야 한다. 그리고 weapon과 armor에 관련된 기능을 가진 메서드들인 weaponUp()와 armorUp()도 static를 붙여야 한다.


[6-10] 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
b. 생성자는 객체를 생성하기 위한 것이다.
c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
e. 생성자는 오버로딩 할 수 없다.

[6-10 풀이]
b. 생성자는 객체를 생성하기 위한 것이 아닌, 객체를 초기화하기 위한 것이다.
e. 생성자는 오버로딩 할 수 있다.


[6-11] 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오 )
a. 객체 자신을 가리키는 참조변수이다.
b. 클래스 내에서라면 어디서든 사용할 수 있다.
c. 지역변수와 인스턴스변수를 구별할 때 사용한다.
d. 클래스 메서드 내에서는 사용할 수 없다.

[6-11 풀이]
b. 클래스 멤버(static이 붙은 변수나 메서드)에는 사용할 수 없다.


[6-12] 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오)
a. 메서드의 이름이 같아야 한다.
b. 매개변수의 개수나 타입이 달라야 한다.
c. 리턴타입이 달라야 한다.
d. 매개변수의 이름이 달라야 한다.

[6-12 풀이]
c. 리턴타입은 오버로딩에 영향을 주지 못한다.
d. 매개변수의 이름과 오버로딩과는 상관이 없다.


[6-13] 다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오)
long add(int a,int b) {return a+b;}
a. long add(int x,int y){return x+y;}
b. long add(long a,long b){return a+b;}
c. int add(byte a,byte b){return a+b;}
d. int add(long a,int b){return a+b;}

[6-13 풀이]
b,c,d 모두 메서드의 이름이 같고 매개변수의 타입이 다르므로 오버로딩이 성립한다.


[6-14] 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.
b. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
c. 초기화 블럭보다 생성자가 먼저 수행된다.
d. 명시적 초기화를 제일 우선적으로 고려해야 한다.
e. 클래스변수보다 인스턴스변수가 먼저 초기화된다.

[6-14 풀이]
c. 생성자보다 초기화 블록이 먼저 수행된다.
e. 클래스 변수는 인스턴스 생성전에 초기화 된다.
