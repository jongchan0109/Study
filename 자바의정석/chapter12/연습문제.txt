[12-1] 클래스 Box가 다음과 같이 정의되어 있을 때, 다음 중 오류가 발생하는 문장은? 경고가 발생하는 문장은?

class Box<T>{
  T item;

  void setItem(T item){this.item = item;}
  T getItem() {return item;}
}

a. Box<Object> b = new Box<String>();
b. Box<Object> b = (Object)new Box<String>();
c. new Box<String>().setItem(new Object());
d. new Box<String>().setItem("ABC");

[12-1 풀이]
a. Box<Object> b = new Box<String>(); // 대입된 타입이 반드시 같아야 한다.
b. Box<Object> b = (Object)new Box<String>(); // Object타입의 인스턴스를 Box<Object>참조변수에 저장 불가
c. new Box<String>().setItem(new Object()); // 대입된 타입이 String이므로, setItem(T item)의 매개변수 역시, String타입만 허용된다.


[12-2] 지네릭 메소드 makeJuice()가 아래와 같이 정의되어 있을 때, 이 메소드를 올바르게 호출한 문장을 모두 고르시오.(Apple과 Grape는 Fruit의 자손이라고 가정하자.)

class Juicer{
  static <T extends Fruit> String MakeJuice(FruitBox<T> box){
    String tmp = "":
    for(Fruit f: box.getList()) tmp += f+" ';
    return tmp;
  }
}

a. Juicer.<Apple>makeJuice(new FruitBox<Fruit>());
b. Juicer.<Fruit>makeJuice(new FruitBox<Grape>());
c. Juicer.<Fruit>makeJuice(new FruitBox<Fruit>());
d. Juicer.makeJuice(new FruitBox<Apple>());
e. Juicer.makeJuice(new FruitBox<Object>());

[12-2 풀이]
c. Juicer.<Fruit>makeJuice(new FruitBox<Fruit>());
d. Juicer.makeJuice(new FruitBox<Apple>());


[12-3] 다음 중 올바르지 않은 문장을 모두 고르시오.

class Box<T extends Fruit>{
  T item;

  void setItem(T item) {this.item = item;}
  T getItem() {return item;}
}

a. Box<?> b = new Box();
b. Box<?> b = new Box<>();
c. Box<?> b = new Box<Object>();
d. Box<Object> b = new Box<Fruit>();
e. Box b = new Box<Fruit>();
f. Box<? extends Fruit> b = new Box<Apple>();
g. Box<? extends Object> b = new Box<? extends Fruit>();

[12-3 풀이]
c. Box<?> b = new Box<Object>(); // Box<T extends Fruit> 이므로 Object는 Fruit의 자손이 아니므로 불가능
d. Box<Object> b = new Box<Fruit>(); // Object와 Fruit 타입 불일치
g. Box<? extends Object> b = new Box<? extends Fruit>(); // new연산자는 타입이 명확해야 하므로 와일드 카드와 같이 사용 불가


[12-4] 아래의 메소드는 두 개의 ArrayList를 매개변수로 받아서, 하나의 새로운 ArrayList로 병합하는 메소드이다. 이를 지네릭 메소드로 변경하시오.

public static ArrayList<? extends Product> merge(ArrayList<? extends Product> list, ArrayList<? extends Product> list2){
  ArrayList<? extends Product> newList = new ArrayList<>(List);
  newList.add(list2);
  return newList;
}

[12-4 풀이]

public static <? extends Product> ArrayList<T> merge(ArrayList<T> list, ArrayList<T> list2){
  ArrayList<T> newList = new ArrayList<>(list);
  newList.add(list2);
  return newList;
}


[12-5] 아래는 예제 7-3에 열거형 Kind와 Number를 새로 정의하여 적용한 것이다. (1)에 알맞은 코드를 넣어 예제를 완성하시오.(Math.random()을 사용했으므로 실행결과가 달리 질 수 있다.)

[12-5 풀이]
코드 참조


[12-6] 다음 중 메타 애너테이션이 아닌 것을 모두 고르시오.
a. Documented
b. Target
c. Native
d. Inherited

[12-6]
c. Native


[12-7] 애너테이션 TestInfo가 다음과 같이 정의되어 있을 때, 이 애너테이션이 올바르게 적용되지 않은 것은?

@interface TestInfo{
  int count() default 1;
  String[] value() default "aaa";
}

a. @TestInfo class Exercise12_7 {}
b. @TestInfo(1) class Exercise12_7 {}
c. @TestInfo("bbb") class Exercise12_7 {}
d. @TestInfo("bbb","ccc") class Exercise12_7 {}

[12-7 풀이]
b. @TestInfo(1) class Exercise12_7 {} // 요소의 이름이 value가 아닌 경우에는 요소의 이름을 생략할 수 없다.
d. @TestInfo("bbb","ccc") class Exercise12_7 {} // 요소의 타입이 배열이고, 지정하려는 값이 여러개인 경우 괄호{}가 필요함.
