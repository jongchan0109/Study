[13-1] 쓰레드를 구현하는 방법에는 Thread클래스로부터 상속받는 것과 Runnable인터페이스를 구현하는 것 두 가지가 있는데, 다음의 코드는 Thread클래스를 상속받아서 쓰레드를 구현한 것이다. 
이 코드를 Runnable인터페이스를 구현하도록 변경하시오.

class Exercise13_1 {
  public static void main(String args[]) {
    Thread1 th1 = new Thread1();
    th1.start();
    }
  }

class Thread1 extends Thread {
  public void run() {
    for(int i=0; i < 300; i++) {
      System.out.print('-');
    }
  }
}

[13-1 풀이]
코드 참조


[13-2] 다음 코드의 실행 결과로 옳은 것은?

class Exercise13_2 {
    public static void main(String[] args) {
        Thread2 t1 = new Thread2();
        t1.run();
        for(int i=0; i < 10; i++)
            System.out.print(i);
    }
}
class Thread2 extends Thread {
    public void run() {
        for(int i=0; i < 10; i++)
            System.out.print(i);
    }
}

a. 01021233454567689789처럼 0부터 9까지의 숫자가 섞여서 출력된다.
b. 01234567890123456789처럼 0부터 9까지의 숫자가 순서대로 출력된다.
c. IllegalThreadStateException이 발생한다.

[13-2 풀이]
b. 01234567890123456789처럼 0부터 9까지의 숫자가 순서대로 출력된다. - start()로 실행한 것이 아니기 때문에 쓰레드가 생성된 것이 아닌, Thread2의 run()메소드가 실행된 것이므로


[13-3] 다음 중 쓰레드를 일시정지 상태(WAITING)로 만드는 것이 아닌 것은? (모두 고르시오)

a. suspend()
b. resume()
c. join()
d. sleep()
e. wait()
f. notify()

[13-3 풀이]
b. resume(), f. notify()


[13-4] 다음 중 interrupt()에 의해서 실행대기 상태(RUNNABLE)가 되지 않는 경우는? (모두 고르시오)

a. sleep()에 의해서 일시정지 상태인 쓰레드
b. join()에 의해서 일시정지 상태인 쓰레드
c. wait()에 의해서 일시정지 상태인 쓰레드
d. suspend()에 의해서 일시정지 상태인 쓰레드

[13-4 풀이]
d. suspend()에 의해서 일시정지 상태인 쓰레드


[13-5] 다음의 코드를 실행한 결과를 예측하고, 직접 실행한 결과와 비교하라. 만일 예측한 결과와 실행한 결과의 차이가 있다면 그 이유를 설명하라.

class Exercise13_5
{
    public static void main(String[] args) throws Exception
    {
        Thread3 th1 = new Thread3();
        th1.start();
        try {
            Thread.sleep(5*1000); // main 쓰레드를 5초간 정지시킨다.
        } catch(Exception e) {}
        throw new Exception(" 꽝~!!!");
    }
}
class Thread3 extends Thread {
    public void run() {
        for(int i=0; i < 10; i++) {
            System.out.println(i);
            try {
                Thread.sleep(1000);
            } catch(Exception e) {}
        }
    } // run()
}

[13-5 풀이]
0
1
2
3
4
5
Exception in thread "main" java.lang.Exception: ~!!! 꽝
      at Exercise13_5.main(Exercise13_5.java:12)
6
7
8
9
main메소드가 종료되었어도, 실행중인 쓰레드가 있으면 프로그램이 종료되지 않는다.


[13-6] 다음의 코드를 실행한 결과를 예측하고, 직접 실행한 결과와 비교하라. 만일 예측한 결과와 실행한 결과의 차이가 있다면 그 이유를 설명하라.

class Exercise13_6
{
    public static void main(String[] args) throws Exception
    {
        Thread4 th1 = new Thread4();
        th1.setDaemon(true);
        th1.start();
        try {
            th1.sleep(5*1000);
        } catch(Exception e) {}
        throw new Exception(" 꽝~!!!");
    }
}
class Thread4 extends Thread {
    public void run() {
        for(int i=0; i < 10; i++) {
            System.out.println(i);
            try {
                Thread.sleep(1000);
            } catch(Exception e) {}
        }
    } // run()
}

[13-6 풀이]
0
1
2
3
4
Exception in thread "main" java.lang.Exception:  꽝~!!!
	at Exercise13_6.main(Exercise13_6.java:11)
th1이 데몬쓰레드이므로, main쓰레드가 종료되면, 바로 종료된다.


[13-7] 다음의 코드는 쓰레드 th1을 생성해서 실행시킨 다음 6초 후에 정지시키는 코드이다. 그러나 실제로 실행시켜보면 쓰레드를 정지시킨 다음에도
몇 초가 지난 후에서야 멈춘다. 그 이유를 설명하고, 쓰레드를 정지시키면 지체없이 바로 정지되도록 코드를 개선하시오.

class Exercise13_7
{
    static boolean stopped = false;
    public static void main(String[] args)
    {
        Thread5 th1 = new Thread5();
        th1.start();
        try {
            Thread.sleep(6*1000);
        } catch(Exception e) {}
        stopped = true; // 쓰레드를 정지시킨다.
        System.out.println("stopped");
    }
}
class Thread5 extends Thread {
    public void run() {
    // Exercise13_7.stopped의 값이 false인 동안 반복한다
        for(int i=0; !Exercise13_7.stopped; i++) {
            System.out.println(i);
            try {
                Thread.sleep(3*1000);
            } catch(Exception e) {}
        }
    } // run()
}

[13-7 풀이]
코드 참조


[13-8]  다음의 코드는 텍스트기반의 타자연습게임인데 WordGenerator라는 쓰레드가 Vector에 2초마다 단어를 하나씩 추가하고, 사용자가 단어를 입력하면
Vector에서 일치하는 단어를 삭제하도록 되어 있다. WordGenerator의 run()을 완성하시오.

[13-8 풀이]
코드 참조


[13-9] 다음은 사용자의 입력을 출력하조 종료하는 프로그램을 작성한 것으로, 10초 동안 입력이 없으면 자동종료 되어야 한다.
그러나 실행결과를 보면, 사용자의 입력이 10초안에 이루어졌음에도 불구하고 프로그램이 즉시 종료되지 않는다. 사용자로부터 입력받는 즉시
프로그램이 종료되도록 수정하시오.

[13-9 풀이]
코드 참조
